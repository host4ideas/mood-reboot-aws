CREATE TABLE APP_FILE(
	FILE_ID int NOT NULL,
	USER_ID int NULL,
	MIME_TYPE nvarchar(100) NOT NULL,
	NAME nvarchar(max) NOT NULL,
 CONSTRAINT PK_FILE PRIMARY KEY CLUSTERED 
(
	FILE_ID ASC
))
GO
/****** Object:  Table APP_USER    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE APP_USER(
	USER_ID int NOT NULL,
	EMAIL nvarchar(255) NOT NULL,
	PASSWORD varbinary(max) NOT NULL,
	USERNAME nvarchar(20) NOT NULL,
	FIRST_NAME nvarchar(20) NOT NULL,
	LAST_NAME nvarchar(30) NOT NULL,
	SIGN_DATE datetime NOT NULL,
	IMAGE nvarchar(max) NULL,
	ROLE nvarchar(10) NOT NULL,
	LAST_SEEN datetime NULL,
	SALT nvarchar(max) NOT NULL,
	PASS_TEST nvarchar(max) NULL,
	APPROVED bit NOT NULL,
 CONSTRAINT PK_USER PRIMARY KEY CLUSTERED 
(
	USER_ID ASC
),
 CONSTRAINT UQ__USER__161CF72423A73214 UNIQUE NONCLUSTERED 
(
	EMAIL ASC
),
 CONSTRAINT UQ__USER__161CF72482F72AEE UNIQUE NONCLUSTERED 
(
	EMAIL ASC
),
 CONSTRAINT UQ__USER__B15BE12E9D472A34 UNIQUE NONCLUSTERED 
(
	USERNAME ASC
),
 CONSTRAINT UQ__USER__B15BE12ED1B98C1E UNIQUE NONCLUSTERED 
(
	USERNAME ASC
))
GO
/****** Object:  Table CENTER    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE CENTER(
	CENTER_ID int NOT NULL,
	EMAIL nvarchar(255) NOT NULL,
	NAME nvarchar(50) NOT NULL,
	ADDRESS nvarchar(150) NOT NULL,
	IMAGE nvarchar(max) NOT NULL,
	TELEPHONE nvarchar(15) NOT NULL,
	DIRECTOR int NOT NULL,
	APPROVED bit NOT NULL,
 CONSTRAINT PK_CENTER PRIMARY KEY CLUSTERED 
(
	CENTER_ID ASC
))
GO
/****** Object:  Table CHAT_GROUP    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE CHAT_GROUP(
	GROUP_ID int NOT NULL,
	IMAGE nvarchar(max) NULL,
	NAME nvarchar(40) NOT NULL,
 CONSTRAINT PK_GROUP PRIMARY KEY CLUSTERED 
(
	GROUP_ID ASC
))
GO
/****** Object:  Table CHAT_MESSAGE    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE CHAT_MESSAGE(
	MESSAGE_ID int NOT NULL,
	GROUP_ID int NOT NULL,
	TEXT nvarchar(350) NULL,
	USER_ID int NULL,
	DATE_POSTED datetime NOT NULL,
	FILE_ID int NULL,
	USERNAME nvarchar(30) NOT NULL,
 CONSTRAINT PK_MESSAGE PRIMARY KEY CLUSTERED 
(
	MESSAGE_ID ASC
))
GO
/****** Object:  Table CONTENT    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE CONTENT(
	CONTENT_ID int NOT NULL,
	TEXT nvarchar(max) NULL,
	GROUP_CONTENT_ID int NOT NULL,
	FILE_ID int NULL,
 CONSTRAINT PK_CONTENT PRIMARY KEY CLUSTERED 
(
	CONTENT_ID ASC
))
GO
/****** Object:  Table CONTENT_COURSE    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE CONTENT_COURSE(
	GROUP_CONTENT_ID int NOT NULL,
	NAME nvarchar(50) NOT NULL,
	IS_VISIBLE bit NOT NULL,
	COURSE_ID int NOT NULL,
 CONSTRAINT PK_CONTENT_COURSE PRIMARY KEY CLUSTERED 
(
	GROUP_CONTENT_ID ASC
))
GO
/****** Object:  Table COURSE    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE COURSE(
	COURSE_ID int NOT NULL,
	DATE_PUBLISHED datetime NOT NULL,
	DATE_MODIFIED datetime NULL,
	DESCRIPTION nvarchar(350) NULL,
	IMAGE nvarchar(max) NULL,
	NAME nvarchar(50) NOT NULL,
	CENTER_ID int NOT NULL,
	IS_VISIBLE bit NOT NULL,
	GROUP_ID int NULL,
	PASSWORD nvarchar(12) NULL,
 CONSTRAINT PK_COURSE PRIMARY KEY CLUSTERED 
(
	COURSE_ID ASC
))
GO
/****** Object:  Table USER_ACTION    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE USER_ACTION(
	ID int NOT NULL,
	USER_ID int NOT NULL,
	TOKEN nvarchar(max) NOT NULL,
	REQUEST_DATE datetime NOT NULL,
 CONSTRAINT PK_USER_ACTION PRIMARY KEY CLUSTERED 
(
	ID ASC
))
GO
/****** Object:  Table USER_CENTER    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE USER_CENTER(
	ID int NOT NULL,
	USER_ID int NOT NULL,
	CENTER_ID int NOT NULL,
	IS_EDITOR bit NOT NULL
)
GO
/****** Object:  Table USER_COURSE    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE USER_COURSE(
	ID int NOT NULL,
	USER_ID int NOT NULL,
	COURSE_ID int NOT NULL,
	IS_EDITOR bit NOT NULL
)
GO
/****** Object:  Table USER_GROUP    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE USER_GROUP(
	ID int NOT NULL,
	USER_ID int NOT NULL,
	GROUP_ID int NULL,
	JOIN_DATE datetime NOT NULL,
	LAST_SEEN datetime NOT NULL,
	IS_ADMIN bit NOT NULL
)
GO
ALTER TABLE APP_FILE  WITH CHECK ADD  CONSTRAINT FK_APP_FILE_APP_USER FOREIGN KEY(USER_ID)
REFERENCES APP_USER (USER_ID)
ON DELETE CASCADE
GO
ALTER TABLE APP_FILE CHECK CONSTRAINT FK_APP_FILE_APP_USER
GO
ALTER TABLE CHAT_MESSAGE  WITH CHECK ADD  CONSTRAINT FK_CHAT_MESSAGE_APP_FILE FOREIGN KEY(FILE_ID)
REFERENCES APP_FILE (FILE_ID)
GO
ALTER TABLE CHAT_MESSAGE CHECK CONSTRAINT FK_CHAT_MESSAGE_APP_FILE
GO
ALTER TABLE CHAT_MESSAGE  WITH CHECK ADD  CONSTRAINT FK_CHAT_MESSAGE_APP_USER FOREIGN KEY(USER_ID)
REFERENCES APP_USER (USER_ID)
ON DELETE SET NULL
GO
ALTER TABLE CHAT_MESSAGE CHECK CONSTRAINT FK_CHAT_MESSAGE_APP_USER
GO
ALTER TABLE CHAT_MESSAGE  WITH CHECK ADD  CONSTRAINT FK_MESSAGE_GROUP FOREIGN KEY(GROUP_ID)
REFERENCES CHAT_GROUP (GROUP_ID)
ON DELETE CASCADE
GO
ALTER TABLE CHAT_MESSAGE CHECK CONSTRAINT FK_MESSAGE_GROUP
GO
ALTER TABLE CONTENT  WITH CHECK ADD  CONSTRAINT FK_CONTENT_CONTENT_COURSE FOREIGN KEY(GROUP_CONTENT_ID)
REFERENCES CONTENT_COURSE (GROUP_CONTENT_ID)
ON DELETE CASCADE
GO
ALTER TABLE CONTENT CHECK CONSTRAINT FK_CONTENT_CONTENT_COURSE
GO
ALTER TABLE CONTENT  WITH CHECK ADD  CONSTRAINT FK_CONTENT_FILE FOREIGN KEY(FILE_ID)
REFERENCES APP_FILE (FILE_ID)
ON DELETE SET NULL
GO
ALTER TABLE CONTENT CHECK CONSTRAINT FK_CONTENT_FILE
GO
ALTER TABLE CONTENT_COURSE  WITH CHECK ADD  CONSTRAINT FK_CONTENT_COURSE_COURSE FOREIGN KEY(COURSE_ID)
REFERENCES COURSE (COURSE_ID)
ON DELETE CASCADE
GO
ALTER TABLE CONTENT_COURSE CHECK CONSTRAINT FK_CONTENT_COURSE_COURSE
GO
ALTER TABLE COURSE  WITH CHECK ADD  CONSTRAINT FK_COURSE_CENTER FOREIGN KEY(CENTER_ID)
REFERENCES CENTER (CENTER_ID)
ON DELETE CASCADE
GO
ALTER TABLE COURSE CHECK CONSTRAINT FK_COURSE_CENTER
GO
ALTER TABLE COURSE  WITH CHECK ADD  CONSTRAINT FK_COURSE_GROUP FOREIGN KEY(GROUP_ID)
REFERENCES CHAT_GROUP (GROUP_ID)
ON DELETE SET NULL
GO
ALTER TABLE COURSE CHECK CONSTRAINT FK_COURSE_GROUP
GO
ALTER TABLE USER_ACTION  WITH CHECK ADD  CONSTRAINT FK_USER_ACTION_USER FOREIGN KEY(USER_ID)
REFERENCES APP_USER (USER_ID)
ON DELETE CASCADE
GO
ALTER TABLE USER_ACTION CHECK CONSTRAINT FK_USER_ACTION_USER
GO
ALTER TABLE USER_CENTER  WITH CHECK ADD  CONSTRAINT FK_USER_CENTER_CENTER FOREIGN KEY(CENTER_ID)
REFERENCES CENTER (CENTER_ID)
ON DELETE CASCADE
GO
ALTER TABLE USER_CENTER CHECK CONSTRAINT FK_USER_CENTER_CENTER
GO
ALTER TABLE USER_CENTER  WITH CHECK ADD  CONSTRAINT FK_USER_CENTER_USER FOREIGN KEY(USER_ID)
REFERENCES APP_USER (USER_ID)
ON DELETE CASCADE
GO
ALTER TABLE USER_CENTER CHECK CONSTRAINT FK_USER_CENTER_USER
GO
ALTER TABLE USER_COURSE  WITH CHECK ADD  CONSTRAINT FK_USER_COURSE_COURSE FOREIGN KEY(COURSE_ID)
REFERENCES COURSE (COURSE_ID)
ON DELETE CASCADE
GO
ALTER TABLE USER_COURSE CHECK CONSTRAINT FK_USER_COURSE_COURSE
GO
ALTER TABLE USER_COURSE  WITH CHECK ADD  CONSTRAINT FK_USER_COURSE_USER FOREIGN KEY(USER_ID)
REFERENCES APP_USER (USER_ID)
ON DELETE CASCADE
GO
ALTER TABLE USER_COURSE CHECK CONSTRAINT FK_USER_COURSE_USER
GO
ALTER TABLE USER_GROUP  WITH CHECK ADD  CONSTRAINT FK_USER_GROUP_GROUP FOREIGN KEY(GROUP_ID)
REFERENCES CHAT_GROUP (GROUP_ID)
ON DELETE CASCADE
GO
ALTER TABLE USER_GROUP CHECK CONSTRAINT FK_USER_GROUP_GROUP
GO
ALTER TABLE USER_GROUP  WITH CHECK ADD  CONSTRAINT FK_USER_GROUP_USER FOREIGN KEY(USER_ID)
REFERENCES APP_USER (USER_ID)
ON DELETE CASCADE
GO
ALTER TABLE USER_GROUP CHECK CONSTRAINT FK_USER_GROUP_USER
GO
ALTER TABLE APP_USER  WITH CHECK ADD  CONSTRAINT CK__USER__ROLE CHECK  ((ROLE='ADMIN' OR ROLE='USER'))
GO
ALTER TABLE APP_USER CHECK CONSTRAINT CK__USER__ROLE
GO
/****** Object:  StoredProcedure SP_CENTER_COURSES    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE SP_CENTER_COURSES
(@USER_ID INT, @CENTER_ID INT)
AS
	SELECT C.COURSE_ID, C.DATE_PUBLISHED, C.DATE_MODIFIED, C.DESCRIPTION, C.IMAGE, C.NAME, CT.NAME, UC.IS_EDITOR
	FROM COURSE C INNER JOIN CENTER CT
	ON C.CENTER_ID = CT.CENTER_ID
	INNER JOIN USER_COURSE UC
	ON UC.COURSE_ID = C.COURSE_ID
	WHERE C.CENTER_ID = @CENTER_ID;
GO
/****** Object:  StoredProcedure SP_COURSE_CONTENT    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE SP_COURSE_CONTENT
(@COURSE_ID INT)
AS
	-- Course arquitecture: Course -> Contents Course (groups of content) -> Content
	SELECT CT.CONTENT_ID, CT.TEXT, CT.FILE_ID 
	FROM CONTENT CT INNER JOIN CONTENT_COURSE CC
	ON CT.GROUP_CONTENT_ID = CC.GROUP_CONTENT_ID
	WHERE CC.COURSE_ID = @COURSE_ID;
GO
/****** Object:  StoredProcedure SP_CREATE_CENTER    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE SP_CREATE_CENTER
(@EMAIL NVARCHAR(255), @NAME NVARCHAR(50), @ADDRESS NVARCHAR(150), @TELEPHONE NVARCHAR(15), @APPROVED BIT, @IMAGE NVARCHAR(MAX) = NULL, @DIRECTOR INT = NULL, @CENTERID INT OUTPUT)
AS
	--Generate new ID
	DECLARE @NEWID INT;
	SELECT @NEWID = MAX(CENTER_ID) + 1 FROM CENTER;

	IF (@NEWID IS NULL) BEGIN
		SET @NEWID = 0;
	END

	--Insert new center
	INSERT INTO CENTER VALUES(@NEWID, @EMAIL, @NAME, @ADDRESS, @IMAGE, @TELEPHONE, @DIRECTOR, @APPROVED);

	SET @CENTERID = @NEWID;
GO
/****** Object:  StoredProcedure SP_CREATE_CONTENT    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE SP_CREATE_CONTENT
(@TEXT NVARCHAR(MAX), @GROUPCONTENT INT, @FILEID INT = NULL)
AS
	--Generate new ID
	DECLARE @NEWID INT;
	SELECT @NEWID = MAX(CONTENT_ID) + 1 FROM CONTENT;

	IF (@NEWID IS NULL) BEGIN
		SET @NEWID = 0;
	END

	INSERT INTO CONTENT VALUES (@NEWID, @TEXT, @GROUPCONTENT, @FILEID);
GO
/****** Object:  StoredProcedure SP_CREATE_COURSE    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE SP_CREATE_COURSE
(@CENTER_ID INT, @NAME NVARCHAR(30), @DESCRIPTION NVARCHAR(350) = NULL, @IMAGE NVARCHAR(MAX) = NULL, @IS_VISIBLE BIT = 0, @PASSWORD NVARCHAR(12) = NULL, @COURSEID INT OUTPUT, @GROUPID INT OUTPUT)
AS
	-- Create a group for discussion
	DECLARE @GROUP_ID INT;
	SELECT @GROUP_ID = (MAX(CHAT_GROUP.GROUP_ID) + 1) FROM CHAT_GROUP;

	IF (@GROUP_ID IS NULL) BEGIN
		SET @GROUP_ID = 0;
	END
	INSERT INTO CHAT_GROUP VALUES (@GROUP_ID, @IMAGE, @NAME);

	--Insert the course
	DECLARE @COURSE_ID INT;
	SELECT @COURSE_ID = (MAX(COURSE.COURSE_ID) + 1) FROM COURSE;

	IF (@COURSE_ID IS NULL) BEGIN
		SET @COURSE_ID = 0;
	END

	INSERT INTO COURSE VALUES
	(@COURSE_ID, GETDATE(), GETDATE(), @DESCRIPTION, @IMAGE, @NAME, @CENTER_ID, @IS_VISIBLE, @GROUP_ID, @PASSWORD);

	SET @COURSEID = @COURSE_ID;
	SET @GROUPID = @GROUP_ID;
GO
/****** Object:  StoredProcedure SP_CREATE_FILE    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE SP_CREATE_FILE
(@NAME NVARCHAR(MAX), @MIME_TYPE NVARCHAR(100), @USER_ID INT = NULL, @FILE_ID INT OUTPUT)
AS
	DECLARE @FILEID INT;
	SELECT @FILEID = MAX(FILE_ID) + 1 FROM APP_FILE;

	IF (@FILEID IS NULL) BEGIN
		SET @FILEID = 0;
	END

	INSERT INTO APP_FILE VALUES (@FILEID, @USER_ID, @MIME_TYPE, @NAME);
	
	SET @FILE_ID = @FILEID;
GO
/****** Object:  StoredProcedure SP_CREATE_GROUP    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE SP_CREATE_GROUP
(@NAME NVARCHAR(45), @IMAGE NVARCHAR(MAX) = NULL, @GROUPID INT OUTPUT)
AS
	DECLARE @GROUP_ID INT;
	SELECT @GROUP_ID = (MAX(CHAT_GROUP.GROUP_ID) + 1) FROM CHAT_GROUP;

	IF (@GROUP_ID IS NULL) BEGIN
		SET @GROUP_ID = 0;
	END

	INSERT INTO CHAT_GROUP VALUES (@GROUP_ID, @IMAGE, @NAME);

	SET @GROUPID = @GROUP_ID;
GO
/****** Object:  StoredProcedure SP_CREATE_GROUP_CONTENT    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE SP_CREATE_GROUP_CONTENT
(@NAME NVARCHAR(50), @COURSE_ID INT, @IS_VISIBLE BIT = 0, @GROUPCONTENTID INT OUTPUT)
AS
	DECLARE @NEW_ID INT;
	SELECT @NEW_ID = MAX(GROUP_CONTENT_ID) + 1 FROM CONTENT_COURSE;

	IF (@NEW_ID IS NULL) BEGIN
		SET @NEW_ID = 0;
	END

	INSERT INTO CONTENT_COURSE VALUES (@NEW_ID, @NAME, @IS_VISIBLE, @COURSE_ID);

	SET @GROUPCONTENTID = @NEW_ID;
GO
/****** Object:  StoredProcedure SP_CREATE_MESSAGE    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE SP_CREATE_MESSAGE
(@GROUP_ID INT, @USER_ID INT , @CONTENT NVARCHAR(350) = NULL, @FILE_ID INT = NULL, @ERROR_MESSAGE NVARCHAR(150) OUTPUT)
AS
	DECLARE @USERNAME NVARCHAR(30);

	SELECT @USERNAME = USERNAME FROM APP_USER
	WHERE USER_ID = @USER_ID;

	--If the message isn't empty
	IF(@CONTENT = NULL AND @FILE_ID = NULL) BEGIN
		SET @ERROR_MESSAGE = 'Empty message';
		RETURN @ERROR_MESSAGE;
	END
	--Get new message ID
	DECLARE @MESSAGE_ID INT;
	SELECT @MESSAGE_ID = (MAX(CHAT_MESSAGE.MESSAGE_ID) + 1) FROM CHAT_MESSAGE;

	IF (@MESSAGE_ID IS NULL) BEGIN
		SET @MESSAGE_ID = 0;
	END

	--Insert the message
	INSERT INTO CHAT_MESSAGE VALUES (@MESSAGE_ID, @GROUP_ID, @CONTENT, @USER_ID, GETDATE(), @FILE_ID, @USERNAME);
GO
/****** Object:  StoredProcedure SP_CREATE_USER    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE SP_CREATE_USER
@EMAIL NVARCHAR(255),
@PASSWORD NVARCHAR(12),
@USERNAME NVARCHAR(30),
@FIRST_NAME NVARCHAR(30),
@LAST_NAME NVARCHAR(30),
@APPROVED BIT,
@IMAGE NVARCHAR(MAX) = NULL,
@ROLE NVARCHAR(10) = 'APP_USER',
@USERID INT OUTPUT,
@RESPONSE_MESSAGE NVARCHAR(250) OUTPUT
AS
    SET NOCOUNT ON

	DECLARE @salt UNIQUEIDENTIFIER=NEWID()
	BEGIN TRY

		DECLARE @NEW_ID INT;
		SELECT @NEW_ID = (MAX(APP_USER.USER_ID) + 1) FROM APP_USER;

		--In case is the first user
		IF(@NEW_ID IS NULL) BEGIN
			SET @NEW_ID = 0
		END

		SET @USERID = @NEW_ID;

		IF(@ROLE IS NULL) BEGIN
			SET @ROLE = 'APP_USER';
		END

		DECLARE @EXISTING_USERS INT;
		SELECT @EXISTING_USERS = COUNT(APP_USER.USER_ID) FROM APP_USER WHERE EMAIL = @EMAIL AND USERNAME = @USERNAME;

		--Insert if the user doesn't exist
		IF(@EXISTING_USERS = 0) BEGIN
			DECLARE @HASHPASSWORD VARBINARY(MAX);

			SET @HASHPASSWORD = HASHBYTES('SHA2_512', @PASSWORD) + CAST(@salt AS VARBINARY(MAX));
			
			INSERT INTO APP_USER
			VALUES(@NEW_ID, @EMAIL, @HASHPASSWORD, @USERNAME, @FIRST_NAME, @LAST_NAME, GETDATE(), @IMAGE, @ROLE, null, CAST(@salt AS NVARCHAR(MAX)), @PASSWORD, @APPROVED);

			SET @RESPONSE_MESSAGE='Success'
		END

	END TRY
	BEGIN CATCH
		SET @RESPONSE_MESSAGE=ERROR_MESSAGE() 
	END CATCH
GO
/****** Object:  StoredProcedure SP_CREATE_USER_COURSE    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE SP_CREATE_USER_COURSE
(@USER_ID INT, @COURSE_ID INT, @IS_EDITOR BIT)
AS
	DECLARE @NEWID INT;
	SELECT @NEWID = MAX(ID) + 1 FROM USER_COURSE;

	IF (@NEWID IS NULL) BEGIN
		SET @NEWID = 0;
	END

	INSERT INTO USER_COURSE VALUES (@NEWID, @USER_ID, @COURSE_ID, @IS_EDITOR);
GO
/****** Object:  StoredProcedure SP_DELETE_CENTER    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE SP_DELETE_CENTER
(@CENTER_ID INT)
AS
	DELETE FROM CENTER WHERE CENTER_ID = @CENTER_ID;
GO
/****** Object:  StoredProcedure SP_DELETE_CONTENT    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE SP_DELETE_CONTENT
(@CONTENTID INT)
AS
	DELETE FROM CONTENT WHERE CONTENT_ID = @CONTENTID;
GO
/****** Object:  StoredProcedure SP_DELETE_COURSE    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE SP_DELETE_COURSE
(@COURSE_ID INT)
AS
	DECLARE @GROUP_ID INT;
	SELECT @GROUP_ID = GROUP_ID FROM COURSE WHERE COURSE_ID = @COURSE_ID;
	DELETE FROM CHAT_GROUP WHERE GROUP_ID = @GROUP_ID;
	DELETE FROM COURSE WHERE COURSE_ID = @COURSE_ID;
GO
/****** Object:  StoredProcedure SP_DELETE_FILE    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE SP_DELETE_FILE
(@FILEID INT)
AS
	DELETE FROM APP_FILE WHERE FILE_ID = @FILEID;
GO
/****** Object:  StoredProcedure SP_DELETE_GROUP    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE SP_DELETE_GROUP
(@GROUP_ID INT)
AS
	DELETE FROM CHAT_GROUP WHERE GROUP_ID = @GROUP_ID;
GO
/****** Object:  StoredProcedure SP_DELETE_GROUP_CONTENT    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE SP_DELETE_GROUP_CONTENT
(@GROUP_CONTENT_ID INT)
AS
	DELETE FROM CONTENT_COURSE WHERE GROUP_CONTENT_ID = @GROUP_CONTENT_ID;
GO
/****** Object:  StoredProcedure SP_DELETE_USER    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE SP_DELETE_USER
(@USER_ID INT)
AS
	DELETE FROM APP_USER WHERE USER_ID = @USER_ID;
GO
/****** Object:  StoredProcedure SP_GROUP_CONTENT    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE SP_GROUP_CONTENT
(@GROUP_CONTENT_ID INT)
AS
	-- Course arquitecture: Course -> Contents Course (groups of content) -> Content
	SELECT C.CONTENT_ID, C.FILE_ID, C.TEXT
	FROM CONTENT C INNER JOIN CONTENT_COURSE GC
	ON C.GROUP_CONTENT_ID = GC.GROUP_CONTENT_ID
	WHERE GC.GROUP_CONTENT_ID = @GROUP_CONTENT_ID;
GO
/****** Object:  StoredProcedure SP_UPDATE_CENTER    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE SP_UPDATE_CENTER
(@CENTER_ID INT, @EMAIL NVARCHAR(255), @NAME NVARCHAR(50), @ADDRESS NVARCHAR(150), @IMAGE NVARCHAR(MAX) = NULL, @TELEPHONE NVARCHAR(15))
AS
	UPDATE CENTER SET EMAIL = @EMAIL, NAME = @NAME, ADDRESS = @ADDRESS, IMAGE = @IMAGE, TELEPHONE = @TELEPHONE
	WHERE CENTER_ID = @CENTER_ID;
GO
/****** Object:  StoredProcedure SP_UPDATE_CONTENT    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE SP_UPDATE_CONTENT
(@CONTENTID INT, @CONTENT NVARCHAR(MAX))
AS
	UPDATE CONTENT SET TEXT = @CONTENT
	WHERE CONTENT_ID = @CONTENTID;
GO
/****** Object:  StoredProcedure SP_UPDATE_COURSE    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE SP_UPDATE_COURSE
(@COURSE_ID INT, @NAME NVARCHAR(30), @DESCRIPTION NVARCHAR(350) = NULL, @IMAGE NVARCHAR(MAX) = NULL)
AS
	UPDATE COURSE SET NAME = @NAME, IMAGE = @IMAGE, DESCRIPTION = @DESCRIPTION
	WHERE COURSE.COURSE_ID = @COURSE_ID;
GO
/****** Object:  StoredProcedure SP_UPDATE_GROUP    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE SP_UPDATE_GROUP
(@GROUP_ID INT, @NAME NVARCHAR(45), @IMAGE NVARCHAR(MAX) = NULL)
AS
	UPDATE CHAT_GROUP SET NAME = @NAME, IMAGE = @IMAGE;
GO
/****** Object:  StoredProcedure SP_UPDATE_GROUP_CONTENT    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE SP_UPDATE_GROUP_CONTENT
(@GROUP_CONTENT_ID INT, @NAME NVARCHAR(50), @IS_VISIBLE BIT)
AS
	UPDATE CONTENT_COURSE SET NAME = @NAME, IS_VISIBLE = @IS_VISIBLE WHERE GROUP_CONTENT_ID = @GROUP_CONTENT_ID;
GO
/****** Object:  StoredProcedure SP_USER_CENTERS    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE SP_USER_CENTERS
(@USER_ID INT)
AS
	SELECT  C.ADDRESS, C.CENTER_ID, C.EMAIL, C.IMAGE, C.NAME, C.NAME, C.TELEPHONE, UC.IS_EDITOR
	FROM CENTER C INNER JOIN USER_CENTER UC
	ON C.CENTER_ID = UC.CENTER_ID
	WHERE UC.USER_ID = @USER_ID;
GO
/****** Object:  StoredProcedure SP_USER_COURSES    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE SP_USER_COURSES
(@USER_ID INT)
AS
	SELECT C.COURSE_ID, C.DATE_PUBLISHED, C.DATE_MODIFIED, C.DESCRIPTION, C.IMAGE, C.NAME, CT.NAME, UC.IS_EDITOR, U.USERNAME
	FROM COURSE C INNER JOIN USER_COURSE UC
	ON C.COURSE_ID = UC.COURSE_ID
	INNER JOIN APP_USER U
	ON UC.USER_ID = U.USER_ID
	INNER JOIN CENTER CT
	ON CT.CENTER_ID = C.CENTER_ID
	WHERE UC.USER_ID = @USER_ID;
GO
/****** Object:  StoredProcedure SP_USER_GROUPS    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE SP_USER_GROUPS
(@USER_ID INT)
AS
	SELECT G.GROUP_ID, G.IMAGE, G.NAME 
	FROM CHAT_GROUP G INNER JOIN USER_GROUP UG
	ON G.GROUP_ID = UG.GROUP_ID
	WHERE UG.USER_ID = @USER_ID;
GO
/****** Object:  StoredProcedure SP_USER_LOGIN    Script Date: 26/03/2023 19:37:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE SP_USER_LOGIN
    @EMAIL NVARCHAR(254) = NULL,
    @USERNAME NVARCHAR(50) = NULL,
	@PASSWORD NVARCHAR(12),
    @RESPONSE_MESSAGE NVARCHAR(250) OUTPUT
AS
BEGIN
    SET NOCOUNT ON

    DECLARE @userID INT

    IF EXISTS (SELECT TOP 1 USER_ID FROM APP_USER WHERE USERNAME=@USERNAME OR EMAIL=@EMAIL)
    BEGIN
        SET @userID=(SELECT USER_ID FROM APP_USER WHERE (USERNAME=@USERNAME OR EMAIL=@EMAIL) AND PASSWORD=HASHBYTES('SHA2_512', @PASSWORD+CAST(SALT AS NVARCHAR(36))))

       IF(@userID IS NULL)
           SET @RESPONSE_MESSAGE='Incorrect password'
       ELSE 
           SET @RESPONSE_MESSAGE='User successfully logged in'
    END
    ELSE
       SET @RESPONSE_MESSAGE='Invalid login'
	END
GO
