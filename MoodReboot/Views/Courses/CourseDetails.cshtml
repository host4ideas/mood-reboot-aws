@using Markdig;
@model CourseDetailsModel

@{
    Layout = "_MenuLayout";
    string streamKey = ViewData["STREAMKEY"] as string;
    string urlStream = ViewData["URL"] as string;
}

@{
    List<FilePreviewModel> previewFiles = new();
    int userId = int.Parse(Context.User.FindFirstValue(ClaimTypes.NameIdentifier));
    List<LastSeenCourse>? lastSeenCourses = Context.Session.GetObject<List<LastSeenCourse>>("LAST_COURSES");

    string leaveCourse = Url.Action("DeleteCourseUser", "Courses", new { id = Model.Course.Id, userId });
    ViewData["ADDITIONAL_LINK"] = $@"<li class='absolute right-5'>
                                    <button id='btn-course-options' data-dropdown-toggle='dropdown-course-options' class='text-gray-900 bg-white border border-gray-300 focus:outline-none hover:bg-gray-100 focus:ring-4 focus:ring-gray-200 font-medium rounded-lg text-sm px-5 py-2.5 dark:bg-gray-800 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 dark:focus:ring-gray-700' type='button'>Opciones</button>
                                    <div id='dropdown-course-options' class='z-10 hidden bg-white divide-y divide-gray-100 rounded-lg shadow w-44 dark:bg-gray-700'>
                                        <ul class='py-2 text-sm text-gray-700 dark:text-gray-200' aria-labelledby='btn-course-options'>
                                          <li>
                                            <a href='{leaveCourse}' class='block px-4 py-1 hover:bg-red-800 hover:text-white dark:hover:bg-red-600 dark:hover:text-gray-800'>Salir del curso</a>
                                          </li>
                                        </ul>
                                    </div>
                                </li>";
}

@{
    if (ViewData["ERROR"] != null)
    {
        <div class="p-4 my-6 text-sm text-red-800 rounded-lg bg-red-50 dark:bg-gray-800 dark:text-red-400" role="alert">
            <span class="font-medium animate-pulse text-red-600">Error: </span> @ViewData["ERROR"]
        </div>
    }
}

<section id="accordion-collapse" class="mt-5 mb-10" data-accordion="collapse">

    @{
        if (Model.IsEditor == true)
        {
            <label class="relative inline-flex items-center cursor-pointer my-6">
                <input id="toggleEditOptions" type="checkbox" value="" class="sr-only peer" checked>
                <div class="w-11 h-6 bg-gray-200 rounded-full peer peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                <span class="ml-3 text-sm font-medium text-gray-900 dark:text-gray-300">Mostrar/ocultar opciones editor</span>
            </label>
            <!-- drawer init and toggle -->
            <div class="editor-option text-center">
                <button type="button" data-drawer-target="drawer-backdrop" data-drawer-show="drawer-backdrop" data-drawer-backdrop="true" aria-controls="drawer-backdrop" class="focus:outline-none text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 mr-2 mb-2 dark:bg-red-800 dark:hover:bg-red-700 dark:focus:ring-red-900">Mostrar usuarios del curso</button>
                <p class="text-2xl lg:text-2xl p-4 tracking-tight font-semibold text-gray-900 dark:text-white">Datos de retransmision</p>
                <div class="stream-info border-2 border-gray-500 text-gray-900 dark:text-white">
                    <p class="font-normal text-lg">Servidor: @ViewData["SERVER"]</p>
                    <div class="font-normal text-lg stream-key">
                        Stream Key:<input class="stream-key-input" type="password" value="@streamKey" id="streamKey" />
                        <button id="watchStreamKey">
                            <svg width="24" height="24" viewBox="0 0 673 534" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M440 267C440 322.23 395.23 367 340 367C284.77 367 240 322.23 240 267C240 211.77 284.77 167 340 167C395.23 167 440 211.77 440 267Z" stroke="currentColor" stroke-width="66.6667" />
                                <path d="M171.658 102.008C262.781 10.8859 410.52 10.8859 501.64 102.008L572.353 172.719C616.797 217.163 639.02 239.387 639.02 267C639.02 294.613 616.797 316.837 572.353 361.28L501.64 431.99C410.52 523.113 262.781 523.113 171.658 431.99L100.948 361.28C56.503 316.837 34.281 294.613 34.281 267C34.281 239.387 56.503 217.163 100.948 172.719L171.658 102.008Z" stroke="currentColor" stroke-width="66.6667" stroke-linejoin="round" />
                            </svg>
                        </button>
                        <button onclick="copyStreamKey()">
                            <svg class="fill-current" width="24" height="24" viewBox="0 0 680 680" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path class="fill-current" fill-rule="evenodd" clip-rule="evenodd"
                                  d="M80 0C58.7827 0 38.4344 8.42854 23.4315 23.4315C8.42854 38.4344 0 58.7827 0 80V440C0 461.217 8.42854 481.566 23.4315 496.569C38.4344 511.571 58.7827 520 80 520H160V600C160 621.217 168.429 641.566 183.431 656.569C198.434 671.571 218.783 680 240 680H600C621.217 680 641.566 671.571 656.569 656.569C671.571 641.566 680 621.217 680 600V240C680 218.783 671.571 198.434 656.569 183.431C641.566 168.429 621.217 160 600 160H520V80C520 58.7827 511.571 38.4344 496.569 23.4315C481.566 8.42854 461.217 0 440 0H80ZM440 160V80H80V440H160V240C160 218.783 168.429 198.434 183.431 183.431C198.434 168.429 218.783 160 240 160H440ZM240 240H600V600H240V240Z"
                                  fill="black" />
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        }
    }
    <div class="curso-header">
        <h2 class="text-3xl lg:text-4xl tracking-tight font-extrabold text-gray-900 dark:text-white">Contenidos</h2>
        @{
            if (ViewData["LIVE"] is true)
            {
                <div id="liveBTN" class=" font-medium btn-live text-gray-900 dark:text-white">
                    En directo
                    <div class="live"></div>
                </div>

                <div class="stream-modal bg-gray-50 dark:bg-gray-800 border-2 border-gray-500 text-gray-900 dark:text-white">
                    <div class="stream-header">
                        <p class="text-2xl lg:text-2xl p-4 tracking-tight font-semibold text-gray-900 dark:text-white">Clase en directo:</p>
                        <svg id="closeLive" width="40" height="40" viewBox="0 0 800 800" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M300 300L399.997 399.997M399.997 399.997L499.997 499.997M399.997 399.997L300 499.997M399.997 399.997L499.997 300M400 700C234.315 700 100 565.687 100 400C100 234.315 234.315 100 400 100C565.687 100 700 234.315 700 400C700 565.687 565.687 700 400 700Z"
                              stroke="currentColor" stroke-width="66.6667" stroke-linecap="round" stroke-linejoin="round" />
                        </svg>
                    </div>
                    <hr>
                    <div class="stream">
                        <div class="inner">
                            <!-- Player wrapper, forcing 16:9 aspect ratio -->
                            <div class="player-wrapper">
                                <div class="aspect-spacer"></div>
                                <div class="pos-absolute full-width full-height top-0">
                                    <video id="video-player" class="el-player" playsinline></video>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }

    </div>


    @{
        if (Model.IsEditor == true)
        {
            <!-- New content group form -->
            <form class="editor-option" method="post" action="@Url.Action("CreateContentGroup", "ContentGroups")">
                <div class="mb-4 flex justify-between items-center gap-4 flex-wrap">
                    <!-- Name -->
                    <div class="relative grow">
                        <input name="name" type="text" id="floating_helper" aria-describedby="floating_helper_text" class="block rounded-t-lg px-2.5 pb-2.5 pt-5 w-full text-sm text-gray-900 bg-gray-50 dark:bg-gray-700 border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer" placeholder=" " />
                        <label for="floating_helper" class="absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-4 scale-75 top-4 z-10 origin-[0] left-2.5 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-4">Nombre del nuevo grupo</label>
                    </div>
                    <div class="flex justify-center items-center gap-4">
                        <div>
                            <!-- IsVisible -->
                            <label class="relative inline-flex items-center cursor-pointer">
                                <input name="isVisible" type="checkbox" value="" class="sr-only peer" onclick="toggleIsVisible(event)">
                                <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                                <span class="ml-3 text-sm font-medium text-gray-900 dark:text-gray-300">Ocultar</span>
                            </label>
                        </div>
                        <!-- Submit -->
                        <button type="submit" class="p-4 text-gray-900 bg-white font-medium rounded border border-gray-300 focus:outline-none hover:bg-gray-100 focus:ring-4 focus:ring-gray-200 dark:bg-gray-800 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 dark:focus:ring-gray-700">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
                            </svg>
                        </button>
                    </div>
                </div>
            </form>
        }

        int indexContentGroup = 0;
        for (int i = 0; i < Model.ContentGroups.Count; i++)
        {
            ContentGroup group = Model.ContentGroups[i];
            int index = i + 1;

            string formId = "formNotSubmit" + index;
            string floatingLabelId = "floating_helper" + group.ContentGroupId;

            string headingClass = "";

            // Different header style per position
            if (i < 1)
            {
                headingClass = "flex items-center justify-between w-full p-2 sm:p-4 text-lg font-bold text-left text-gray-500 border-2 border-gray-200 rounded-t-xl focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-800 dark:border-gray-700 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-800 cursor-pointer";
            }
            else if (i > 0 && i < Model.ContentGroups.Count - 1)
            {
                headingClass = "flex items-center justify-between w-full p-2 sm:p-4 text-lg font-bold text-left text-gray-500 border-2 border-t-0 border-gray-200 focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-800 dark:border-gray-700 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-800 cursor-pointer";
            }
            else
            {
                headingClass = "flex items-center justify-between w-full p-2 sm:p-4 text-lg font-bold text-left text-gray-500 border-2 border-t-0 border-gray-200 focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-800 dark:border-gray-700 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-800 cursor-pointer";
            }

            // Header
            <div id="accordion-collapse-heading-@index">
                <div class="@headingClass" data-accordion-target="#accordion-collapse-body-@index" aria-expanded="false" aria-controls="accordion-collapse-body-@index">
                    @{
                        if (Model.IsEditor == true)
                        {
                            <div class="editor-option">
                                <!-- Delete content group -->
                                <a asp-controller="ContentGroups" asp-action="DeleteContentGroup" asp-route-id="@group.ContentGroupId" asp-route-courseId="@Model.Course.Id" class="inline-flex items-center my-1 p-1 sm:p-4 text-gray-900 dark:text-white font-medium rounded border border-gray-300 focus:outline-none focus:ring-4 focus:ring-gray-200 bg-red-400 hover:bg-red-200 dark:hover:bg-red-700 dark:bg-red-900 dark:border-gray-600 dark:hover:bg-red-700 dark:hover:border-gray-600 dark:focus:ring-gray-700">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0" />
                                    </svg>
                                </a>
                            </div>
                            <!-- Update content group -->
                            <form id="@formId" class="editor-option flex flex-wrap items-center gap-4 justify-center" method="post" data-accordion-target="#accordion-collapse-body-@index" aria-expanded="false" aria-controls="accordion-collapse-body-@index" action="@Url.Action("UpdateContentGroup", "ContentGroups")">
                                <input type="hidden" name="id" value="@group.ContentGroupId" />
                                <input type="hidden" name="courseId" value="@Model.Course.Id" />
                                <div class="relative">
                                    <input value="@group.Name" name="name" type="text" id="@floatingLabelId" aria-describedby="floating_helper_text" onclick="handlePropagation(event)" class="block rounded-t-lg px-2.5 pb-2.5 pt-5 w-full text-sm text-gray-900 bg-gray-50 dark:bg-gray-700 border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer" placeholder=" " />
                                    <label for="@floatingLabelId" class="absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-4 scale-75 top-4 z-10 origin-[0] left-2.5 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-4">Nuevo nombre</label>
                                </div>
                                <!-- IsVisible -->
                                <label class="relative inline-flex items-center cursor-pointer">
                                    @{
                                        if (group.IsVisible == true)
                                        {
                                            <input onclick="toggleIsVisible(event)" name="isVisible" type="checkbox" value="true" class="sr-only peer" checked>
                                        }
                                        else
                                        {
                                            <input onclick="toggleIsVisible(event)" name="isVisible" type="checkbox" value="false" class="sr-only peer">
                                        }
                                    }
                                    <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                                    <span class="ml-3 text-sm font-medium text-gray-900 dark:text-gray-300">Visible</span>
                                    <!-- Update content -->
                                </label>
                                <button class="my-1 p-3 text-gray-900 bg-white font-medium rounded border border-gray-300 focus:outline-none hover:bg-gray-100 focus:ring-4 focus:ring-gray-200 dark:bg-gray-800 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 dark:focus:ring-gray-700">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0013.803-3.7M4.031 9.865a8.25 8.25 0 0113.803-3.7l3.181 3.182m0-4.991v4.99" />
                                    </svg>
                                </button>
                            </form>
                        }
                    }

                    <span class="@(Model.IsEditor == true ? "hidden" : null) editor-option">@group.Name</span>
                    <svg data-accordion-icon class="w-6 h-6 shrink-0" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>
                </div>
            </div>



            // Different body style per position
            string contentBodyClass = "";

            if (i < 1 || (i > 0 && i < Model.ContentGroups.Count - 1))
            {
                contentBodyClass = "p-5 font-light border-2 border-gray-200 dark:border-gray-700 dark:bg-gray-900";
            }
            else
            {
                contentBodyClass = "p-5 font-light border-2 border-t-0 border-gray-200 dark:border-gray-700";
            }



            // Body
            <div id="accordion-collapse-body-@index" class="hidden" aria-labelledby="accordion-collapse-heading-@index">
                <div class="@contentBodyClass">
                    <!-- Content -->
                    @{
                        foreach (ContentListModel content in group.Contents)
                        {
                            indexContentGroup += 1;

                            <div class="pt-8 pb-16 lg:pt-16 lg:pb-24 bg-white dark:bg-gray-900">
                                @{
                                    if (Model.IsEditor == true)
                                    {
                                        <div class="editor-option text-center mb-2">
                                            <!-- Update content -->
                                            <button onclick="@(content.FileId != null ? $"btnUpdateContentFileHandler({content.Id})" : $"btnUpdateContentHandler({content.Id})")" type="button" class="my-1 p-3 text-gray-900 bg-white font-medium rounded border border-gray-300 focus:outline-none hover:bg-gray-100 focus:ring-4 focus:ring-gray-200 dark:bg-gray-800 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 dark:focus:ring-gray-700">
                                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                                                    <path stroke-linecap="round" stroke-linejoin="round" d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10" />
                                                </svg>
                                            </button>
                                            <!-- Delete content -->
                                            <a asp-controller="Content" asp-action="DeleteContent" asp-route-contentId="@content.Id" asp-route-courseId="@Model.Course.Id" class="inline-flex items-center my-1 p-3 text-gray-900 dark:text-white font-medium rounded border border-gray-300 focus:outline-none focus:ring-4 focus:ring-gray-200 bg-red-400 hover:bg-red-200 dark:hover:bg-red-700 dark:bg-red-900 dark:border-gray-600 dark:hover:bg-red-700 dark:hover:border-gray-600 dark:focus:ring-gray-700">
                                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                                                    <path stroke-linecap="round" stroke-linejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0" />
                                                </svg>
                                            </a>
                                        </div>
                                    }
                                }
                                <div class="flex justify-between px-4 mx-auto max-w-screen-xl ">
                                    @{
                                        if (content.Text != null)
                                        {
                                            <article id="@content.Id" class="mx-auto w-full max-w-2xl format format-sm sm:format-base lg:format-lg format-blue dark:format-invert">
                                                @Html.Raw(Markdown.ToHtml(content.Text))
                                            </article>
                                        }
                                        else if (content.File != null)
                                        {
                                            if (content.File.MimeType == "image/webp" || content.File.MimeType == "image/jpeg" || content.File.MimeType == "image/png" || content.File.MimeType == "image/gif")
                                            {
                                                <article id="@content.Id" class="mx-auto w-full max-w-2xl format format-sm sm:format-base lg:format-lg format-blue dark:format-invert">
                                                    <img src="@content.File.Name" class="mx-auto" width="400" />
                                                </article>
                                            }
                                            else if (content.File.MimeType == "application/pdf")
                                            {
                                                previewFiles.Add(new FilePreviewModel()
                            {
                                FileName = content.File.Name,
                                Type = content.File.MimeType,
                                TargetId = indexContentGroup
                            });

                                                <!-- PDF preview -->
                                                <article value="@content.File.Name" id="@("content" + indexContentGroup)" class="pdf-preview mx-auto w-full max-w-2xl format format-sm sm:format-base lg:format-lg format-blue dark:format-invert">
                                                    <!-- PDF preview -->
                                                    <div id="@("previewContent" + indexContentGroup)" class="hidden">
                                                        <!-- Prev button -->
                                                        <button type="button" id="@("prev" + indexContentGroup)" class="relative inline-flex items-center justify-center p-0.5 mb-2 mr-2 overflow-hidden text-sm font-medium text-gray-900 rounded-lg group bg-gradient-to-br from-purple-600 to-blue-500 group-hover:from-purple-600 group-hover:to-blue-500 hover:text-white dark:text-white focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800">
                                                            <span class="relative px-5 py-2.5 transition-all ease-in duration-75 bg-white dark:bg-gray-900 rounded-md group-hover:bg-opacity-0">
                                                                Previous
                                                            </span>
                                                        </button>
                                                        <!-- Next button -->
                                                        <button type="button" id=@("next" + indexContentGroup) class="relative inline-flex items-center justify-center p-0.5 mb-2 mr-2 overflow-hidden text-sm font-medium text-gray-900 rounded-lg group bg-gradient-to-br from-green-400 to-blue-600 group-hover:from-green-400 group-hover:to-blue-600 hover:text-white dark:text-white focus:ring-4 focus:outline-none focus:ring-green-200 dark:focus:ring-green-800">
                                                            <span class="relative px-5 py-2.5 transition-all ease-in duration-75 bg-white dark:bg-gray-900 rounded-md group-hover:bg-opacity-0">
                                                                Next
                                                            </span>
                                                        </button>

                                                        <!-- Page progress bar -->
                                                        <div class="w-full bg-gray-200 rounded-full dark:bg-gray-700" style="max-height:20px">
                                                            <div id="@("pageProgressBar" + indexContentGroup)" class="bg-blue-600 text-xs font-medium text-blue-100 text-center p-0.5 leading-none rounded-full" style="width: 0%">
                                                                <span id="@("pageNum" + indexContentGroup)"></span> / <span id="@("pageCount" + indexContentGroup)"></span>
                                                            </div>
                                                        </div>


                                                        <!-- Preview pdf content canvas -->
                                                        <canvas id="@("canvasPdfPreview" + indexContentGroup)" class="mx-auto" style="max-width:250px"></canvas>
                                                    </div>
                                                </article>
                                            }
                                            else if (content.File.MimeType == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" || content.File.MimeType == "application/vnd.ms-excel")
                                            {
                                                previewFiles.Add(new FilePreviewModel()
                            {
                                FileName = content.File.Name,
                                Type = content.File.MimeType,
                                TargetId = indexContentGroup
                            });

                                                <article value="@content.File.Name" id="@("content" + indexContentGroup)" class="mx-auto w-full max-w-2xl format format-sm sm:format-base lg:format-lg format-blue dark:format-invert">
                                                    <!-- Excel preview -->
                                                    <div id="@("tableDataPreview" + indexContentGroup)" class="mx-auto excel-preview relative overflow-x-auto max-w-36 max-h-72">
                                                    </div>
                                                </article>
                                            }
                                        }
                                    }
                                </div>
                            </div>
                        }
                        if (Model.IsEditor == true)
                        {
                            <div class="editor-option text-center">
                                <button onclick="btnNewContentHandler(@group.ContentGroupId)" data-tooltip-target="tooltip-new-content-@index" type="button" class="p-4 text-gray-900 bg-white font-medium rounded border border-gray-300 focus:outline-none hover:bg-gray-100 focus:ring-4 focus:ring-gray-200 dark:bg-gray-800 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 dark:focus:ring-gray-700">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
                                    </svg>
                                    <span class="sr-only">Añadir nuevo contenido</span>
                                </button>
                                <div id="tooltip-new-content-@index" role="tooltip" class="absolute z-10 invisible inline-block px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-gray-900 rounded-lg shadow-sm opacity-0 tooltip dark:bg-gray-700">
                                    Añadir nuevo contenido
                                    <div class="tooltip-arrow" data-popper-arrow></div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>

        }

    }
</section>



<!-- Editor -->
<div id="editorWindow" class="hidden" style="margin: 50px auto;">
    <form id="editorForm" action="" method="post" enctype="multipart/form-data">
        @{
            // Take userId from session
            <input type="hidden" value="@userId" name="userId" />
            // Take courseId from Model
            <input type="hidden" value="@Model.Course.Id" name="courseId" />
        }
        <input id="groupId" type="hidden" value="0" name="groupId" />
        <input id="contentId" type="hidden" value="0" name="contentId" />
        <input name="hiddenFileInput" id="hiddenFileInput" type="file" class="hidden" />

        <div class="w-full mb-4 border border-gray-200 rounded-lg bg-gray-50 dark:bg-gray-700 dark:border-gray-600">
            <div class="flex flex-wrap items-center justify-between px-3 py-2 border-b dark:border-gray-600">
                <div class="flex flex-wrap items-center divide-gray-200 sm:divide-x dark:divide-gray-600">
                    <div class="flex items-center space-x-1 sm:pr-4">
                        <!-- Upload file -->
                        <button id="btn-upload-file" type="button" data-tooltip-target="tooltip-attach-file" class="p-2 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 dark:text-gray-400 dark:hover:text-white dark:hover:bg-gray-600">
                            <svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M8 4a3 3 0 00-3 3v4a5 5 0 0010 0V7a1 1 0 112 0v4a7 7 0 11-14 0V7a5 5 0 0110 0v4a3 3 0 11-6 0V7a1 1 0 012 0v4a1 1 0 102 0V7a3 3 0 00-3-3z" clip-rule="evenodd"></path></svg>
                            <span class="sr-only">Subir archivo</span>
                        </button>
                        <div id="tooltip-attach-file" role="tooltip" class="absolute z-10 invisible inline-block px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-gray-900 rounded-lg shadow-sm opacity-0 tooltip dark:bg-gray-700">
                            Subir archivo
                            <div class="tooltip-arrow" data-popper-arrow></div>
                        </div>

                        <!-- Upload image -->
                        <button id="btn-upload-image" type="button" data-tooltip-target="tooltip-attach-image" class="p-2 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 dark:text-gray-400 dark:hover:text-white dark:hover:bg-gray-600">
                            <svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd"></path></svg>
                            <span class="sr-only">Subir imagen</span>
                        </button>
                        <div id="tooltip-attach-image" role="tooltip" class="absolute z-10 invisible inline-block px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-gray-900 rounded-lg shadow-sm opacity-0 tooltip dark:bg-gray-700">
                            Subir imagen
                            <div class="tooltip-arrow" data-popper-arrow></div>
                        </div>

                    </div>
                    <!-- Add list -->
                    <div class="flex flex-wrap items-center space-x-1 sm:pl-4">
                        <button id="btn-add-list" type="button" data-tooltip-target="tooltip-add-list" class="p-2 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 dark:text-gray-400 dark:hover:text-white dark:hover:bg-gray-600">
                            <svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
                            <span class="sr-only">Añadir lista</span>
                        </button>
                        <div id="tooltip-add-list" role="tooltip" class="absolute z-10 invisible inline-block px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-gray-900 rounded-lg shadow-sm opacity-0 tooltip dark:bg-gray-700">
                            Añadir lista
                            <div class="tooltip-arrow" data-popper-arrow></div>
                        </div>
                    </div>
                </div>
                <button id="close-editor" type="button" data-tooltip-target="tooltip-close-editor" class="p-2 text-gray-500 rounded cursor-pointer sm:ml-auto hover:text-gray-900 hover:bg-gray-100 dark:text-gray-400 dark:hover:text-white dark:hover:bg-gray-600">
                    <svg aria-hidden="true" class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                    <span class="sr-only">Cerrar editor</span>
                </button>
                <div id="tooltip-close-editor" role="tooltip" class="absolute z-10 invisible inline-block px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-gray-900 rounded-lg shadow-sm opacity-0 tooltip dark:bg-gray-700">
                    Cerrar editor
                    <div class="tooltip-arrow" data-popper-arrow></div>
                </div>
            </div>
            <div class="flex flex-row justify-between">
                <div class="w-1/2 m-5 mb-5 px-4 py-2 bg-white rounded-b-lg dark:bg-gray-800">
                    <label for="editor" class="sr-only">Publish post</label>
                    <!-- Text Area -->
                    <textarea id="editor" name="unsafeHtml" oninput="resizeTextArea(event)" cols="100" class="block w-full px-0 text-sm text-gray-800 bg-white border-0 dark:bg-gray-800 focus:ring-0 dark:text-white dark:placeholder-gray-400 scrollbar-styled" placeholder="Acepta Markdown y HTML..."></textarea>

                    <!-- Excel preview -->
                    <div id="tableDataPreview" class="hidden relative overflow-x-auto max-w-36 max-h-72"></div>

                    <!-- Image preview -->
                    <div id="previewImage" class="hidden">
                        <img class="h-auto max-w-xs" id="imgImagePreview" alt="image description" />
                    </div>

                    <!-- PDF preview -->
                    <div id="previewContent" class="hidden">
                        <hr class="h-px my-8 bg-gray-200 border-0 dark:bg-gray-700" />
                        <!-- Prev button -->
                        <button type="button" id="prev" class="hidden relative inline-flex items-center justify-center p-0.5 mb-2 mr-2 overflow-hidden text-sm font-medium text-gray-900 rounded-lg group bg-gradient-to-br from-purple-600 to-blue-500 group-hover:from-purple-600 group-hover:to-blue-500 hover:text-white dark:text-white focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800">
                            <span class="relative px-5 py-2.5 transition-all ease-in duration-75 bg-white dark:bg-gray-900 rounded-md group-hover:bg-opacity-0">
                                Previous
                            </span>
                        </button>
                        <!-- Next button -->
                        <button type="button" id="next" class="hidden relative inline-flex items-center justify-center p-0.5 mb-2 mr-2 overflow-hidden text-sm font-medium text-gray-900 rounded-lg group bg-gradient-to-br from-green-400 to-blue-600 group-hover:from-green-400 group-hover:to-blue-600 hover:text-white dark:text-white focus:ring-4 focus:outline-none focus:ring-green-200 dark:focus:ring-green-800">
                            <span class="relative px-5 py-2.5 transition-all ease-in duration-75 bg-white dark:bg-gray-900 rounded-md group-hover:bg-opacity-0">
                                Next
                            </span>
                        </button>

                        <!-- Page progress bar -->
                        <div class="hidden w-full bg-gray-200 rounded-full dark:bg-gray-700" style="max-height:20px">
                            <div id="pageProgressBar" class="bg-blue-600 text-xs font-medium text-blue-100 text-center p-0.5 leading-none rounded-full" style="width: 0%">
                                <span id="page_num"></span> / <span id="page_count"></span>
                            </div>
                        </div>

                        <!-- Preview pdf content canvas -->
                        <canvas id="canvasPdfPreview" style="max-width:250px"></canvas>
                    </div>

                </div>
                <div class="block w-1/2 m-5 px-4 py-2 bg-white rounded-b-lg dark:bg-gray-800 scrollbar-hide">
                    <!-- Markdown preview -->
                    <div id="markdownPreview" class="format dark:format-invert"></div>
                </div>
            </div>
        </div>
        <button type="submit" id="btnEditorSubmit" class="inline-flex items-center px-5 py-2.5 text-sm font-medium text-center text-white bg-blue-700 rounded-lg focus:ring-4 focus:ring-blue-200 dark:focus:ring-blue-900 hover:bg-blue-800">
            Añadir sección
        </button>
    </form>
</div>

@section scripts {
    <script src="~/js/filePreviewContentCourse.js" async></script>
    <script src="/js/pdfjs-3.3.122-dist/build/pdf.worker.js" async></script>
    <script>
        let previewFilesList = @Html.Raw(Json.Serialize(previewFiles));

        $(document).ready(function () {
            previewFilesList.forEach(file => {
                const url = file.fileName;
                const targetId = file.targetId;

                var req = new XMLHttpRequest();
                req.open("GET", url, true);
                req.responseType = "blob";
                req.onload = function (event) {
                    var blob = req.response;

                    var fileReader = new FileReader();
                    fileReader.onload = function () {
                        var data = fileReader.result;

                        if (file.type == "application/pdf") {
                            previewPdf(data, "previewContent" + targetId, "canvasPdfPreview" + targetId, "next" + targetId, "prev" + targetId, "pageNum" + targetId, "pageProgressBar" + targetId, "countId" + targetId);
                        }

                        if (file.type == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" || file.type == "application/vnd.ms-excel") {
                            previewExcel(data, "tableDataPreview" + targetId);
                        }
                    };
                    fileReader.readAsArrayBuffer(blob);
                };

                req.send();
            });
        });
    </script>
    <!-- Cargar los scripts solo para editor -->
    @if (Model.IsEditor == true)
    {
        <text>
            <script>
                const converter = new showdown.Converter({ extensions: ['xssfilter'] });

                function parseArticleMd(contentId, isFile) {
                    const text = $(`#${contentId}`).html();
                    const html = converter.makeHtml(text);
                    $(`#${contentId}`).html(html);
                }

                function parseMarkdown() {
                    const text = $("#editor").val();
                    const html = converter.makeHtml(text);
                    $("#markdownPreview").html(html);
                }

                $("#editor").keyup(function (e) {
                    parseMarkdown();
                });

                function scrollToEditor() {
                    $('html, body').animate({
                        scrollTop: $("#editorWindow").offset().top - 100
                    }, 1000);
                }

                function btnUpdateContentHandler(contentId) {
                    // Get the content's Markdown (article tag)
                    const id = "#" + contentId;
                    let contentHtml = $(id).html().trim();

                    // Parse the HTML to Markdown
                    let contentMd = converter.makeMarkdown(contentHtml);
                    $("#editor").html(contentMd);

                    // Show the editor
                    $("#editorWindow").removeClass("hidden");
                    $("#btnEditorSubmit").text("Actualizar")
                    // Set contentId hidden input value
                    $("#contentId").val(contentId);
                    // Update editor's form action
                    document.getElementById("editorForm").action = "/Content/UpdateContent"
                    // Display nicely the content's HTML in the editor preview
                    parseMarkdown();
                    scrollToEditor();
                }

                function btnUpdateContentFileHandler(contentId) {
                    //// Show the editor
                    $("#editorWindow").removeClass("hidden");
                    $("#btnEditorSubmit").text("Actualizar")
                    // Set contentId hidden input value
                    $("#contentId").val(contentId);
                    // Update editor's form action
                    document.getElementById("editorForm").action = "/Content/UpdateContent"
                    //document.getElementById(editor).placeholder = "No puedes "
                    scrollToEditor();
                }

                function btnNewContentHandler(contentGroupId) {
                    // Show the editor
                    $("#editor").html("");
                    $("#markdownPreview").html("");
                    $("#editorWindow").toggleClass("hidden");
                    $("#btnEditorSubmit").text("Añadir")
                    // Sset groupId hidden input value
                    $("#groupId").val(contentGroupId);
                    // Update editor's form action
                    document.getElementById("editorForm").action = "/Content/AddContent"
                    scrollToEditor();
                }

                function handlePropagation(e) {
                    e.stopPropagation();
                }

                function btnUpdateContentGroup() {
                    $("#editorContentGroup").toggleClass("hidden");
                }

                function toggleIsVisible(e) {
                    if (e.target.value == "false") {
                        e.target.value = "true";
                    } else {
                        e.target.value = "false";
                    }
                }

                // Upload file button
                $("#btn-upload-file").click(function () {
                    $("#hiddenFileInput").click();
                });
                // Upload image button
                $("#btn-upload-image").click(function () {
                    $("#hiddenFileInput").click();
                });
                // Add list button
                $("#btn-add-list").click(function () {
                    let initialHtml = $("#editor").html();
                    initialHtml += "\n - item 1\n - item 2\n - item 3";
                    $("#editor").html(initialHtml);
                    parseMarkdown();
                });

                $(".editor-option").click(handlePropagation);

                $("#close-editor").click(function () {
                    $("#editor").html("");
                    $("#editorWindow").toggleClass("hidden");
                });

                $("#toggleEditOptions").click(function () {
                    $(".editor-option").toggle("fast");

                    // If the editor window is shown, hide it
                    if (!$("#editorWindow").hasClass("hidden")) {
                        $("#editorWindow").toggle("fast");
                    }
                    if (!$("#editorContentGroup").hasClass("hidden")) {
                        $("#editorContentGroup").toggle("fast");
                    }
                });
            </script>
        </text>
    }
}

@{
    if (lastSeenCourses != null)
    {
        <!-- Related courses -->
        <aside aria-label="Cursos relacionados" class="py-4 rounded-lg bg-gray-50 dark:bg-gray-800" style="margin-top: 75px;">
            <div class="px-4 mx-auto max-w-screen-xl">
                <h2 class="mb-8 text-2xl font-bold text-gray-900 dark:text-white">Últimos cursos vistos</h2>
                <div class="whitespace-nowrap overflow-hidden overflow-x-auto">
                    @foreach (LastSeenCourse course in lastSeenCourses)
                    {
                        <article class="scale-hover-animation inline-block mx-4 max-w-xs overflow-hidden">
                            <a asp-controller="Courses" asp-action="CourseDetails" asp-route-courseId="@course.Id">
                                <img src="~/uploads/course_images/@course.Image" class="mb-2 rounded-lg" alt="Image 1" style="width: 15rem;">
                            </a>
                            <h2 class="mb-2 text-xl font-bold leading-tight text-gray-900 dark:text-white">
                                <a asp-controller="Courses" asp-action="CourseDetails" asp-route-courseId="@course.Id">
                                    <p class="font-light text-gray-500 dark:text-gray-400">@course.Name</p>
                                </a>
                            </h2>
                            <p class="font-light text-gray-500 dark:text-gray-400">@course.Description[50..]</p>
                        </article>
                    }
                </div>
            </div>
        </aside>
    }
}
@{
    // Course users
    if (Model.IsEditor == true && Model.CourseUsers != null)
    {
        <!-- Course's users sidebar -->
        <div id="drawer-backdrop" class="editor-option fixed top-0 left-0 z-50 h-screen p-4 overflow-y-auto transition-transform -translate-x-full bg-white w-80 dark:bg-gray-800" tabindex="-1" aria-labelledby="drawer-backdrop-label">
            <h5 id="drawer-backdrop-label" class="text-base font-semibold text-gray-500 uppercase dark:text-gray-400">Usuarios</h5>
            <button type="button" data-drawer-hide="drawer-backdrop" aria-controls="drawer-backdrop" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 absolute top-2.5 right-2.5 inline-flex items-center dark:hover:bg-gray-600 dark:hover:text-white">
                <svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>
                <span class="sr-only">Cerrar menú</span>
            </button>
            <div class="py-4 overflow-y-auto">
                <ul class="space-y-2">
                    @{
                        int indexDropdown = 0;

                        foreach (CourseUsersModel user in Model.CourseUsers)
                        {
                            if (user.Id != userId)
                            {
                                indexDropdown += 1;
                                <li>
                                    <button type="button" class="flex items-center w-full p-2 text-base font-normal text-gray-900 transition duration-75 rounded-lg group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700" aria-controls="dropdown-user-@indexDropdown" data-collapse-toggle="dropdown-user-@indexDropdown">
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                                            <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 6a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0zM4.501 20.118a7.5 7.5 0 0114.998 0A17.933 17.933 0 0112 21.75c-2.676 0-5.216-.584-7.499-1.632z" />
                                        </svg>
                                        <span class="flex-1 ml-3 text-left whitespace-nowrap">@user.UserName</span>
                                        @{
                                            if (user.IsEditor == true)
                                            {
                                                <span class="flex-1 ml-3 text-left whitespace-nowrap">✏️</span>
                                            }
                                        }
                                        <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>
                                    </button>
                                    <ul id="dropdown-user-@indexDropdown" class="hidden py-2 space-y-2">
                                        <li>
                                            <a asp-controller="Courses" asp-action="DeleteCourseUser" asp-route-courseId="@Model.Course.Id" asp-route-userId="@user.Id" class="flex items-center w-full p-2 text-base font-normal text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">
                                                Eliminar del curso
                                            </a>
                                        </li>
                                        @{
                                            if (user.IsEditor == true)
                                            {
                                                <li>
                                                    <a asp-controller="Courses" asp-action="DeleteCourseEditor" asp-route-courseId="@Model.Course.Id" asp-route-userId="@user.Id" class="flex items-center w-full p-2 text-base font-normal text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">
                                                        Quitar editor
                                                    </a>
                                                </li>
                                            }
                                            else
                                            {
                                                <li>
                                                    <a asp-controller="Courses" asp-action="AddCourseEditor" asp-route-courseId="@Model.Course.Id" asp-route-userId="@user.Id" class="flex items-center w-full p-2 text-base font-normal text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">
                                                        Añadir editor
                                                    </a>
                                                </li>
                                            }
                                        }
                                    </ul>
                                </li>
                            }
                        }
                    }
                </ul>
            </div>
        </div>
    }
}



<style>
    .curso-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .btn-live {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 15px;
        background-color: transparent;
        border: 2px solid #f03629;
        box-shadow: 0px 0px 10px #f03629;
        border-radius: 10px;
        padding: 5px 20px;
        transition: all 0.5s ease !important;
    }

    .live {
        background-color: #f03629;
        box-shadow: 0px 0px 10px #f03629;
        border: 1px solid transparent;
        height: 10px;
        width: 10px;
        border-radius: 100%;
        transition: all 0.5s ease;
        animation: palpitacion 1s infinite;
    }

    .btn-live:hover {
        background-color: #f03629;
        box-shadow: 0px 0px 30px #f03629;
    }

    @@keyframes palpitacion {
        0% {
            transform: scale(1);
        }

        50% {
            transform: scale(1.3);
        }

        100% {
            transform: scale(1);
        }
    }

    .stream-info {
        width: fit-content;
        margin: auto;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        border-radius: 10px;
        padding: 5px 20px;
    }

        .stream-info > p {
            width: fit-content;
            padding: 10px 0px;
        }

    @@keyframes palpitacionBorder {
        0% {
            border: 2px solid #ffbeba;
        }

        50% {
            border: 2px solid #f01f11;
        }

        100% {
            border: 2px solid #ffbeba;
        }
    }

    .stream-key {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 10px;
    }

    .stream-key-input {
        background-color: transparent;
        border: none;
        width: 350px;
        border-radius: 10px;
    }

    .stream-modal {
        display:none;
        border-radius: 20px;
        position: fixed;
        left: 15vw;
        top: 5vh;
        width: 70vw;
        z-index:100;
    }

    .stream-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    #closeLive {
        border-radius: 100px;
        width: min-content;
        float: right;
        margin-right: 10px;
        z-index: 100;
    }

    .stream {
        width: 100%;
        padding: 20px;
    }

</style>

<script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
<script>



    $("#watchStreamKey").click(function () {
        if ($('#streamKey').attr('type') == 'password') {
            document.getElementById('streamKey').type = 'text';
        }
        else {
            document.getElementById('streamKey').type = 'password';
        }
    })


    function copyStreamKey() {
        // Seleccionar el campo de entrada de contraseña
        var campoPassword = $("#streamKey");
        // Crear un elemento de texto temporal
        var tempElement = $("<input>");
        // Asignar el valor del campo de contraseña al elemento de texto temporal
        tempElement.val(campoPassword.val());
        // Agregar el elemento temporal al cuerpo del documento
        $("body").append(tempElement);
        // Seleccionar el contenido del elemento de texto temporal
        tempElement.select();
        // Copiar el contenido seleccionado al portapapeles
        document.execCommand("copy");
        // Eliminar el elemento temporal del cuerpo del documento
        tempElement.remove();
        // Mostrar un mensaje de éxito
        alert("La clave de retransmision ha sido copiada al portapapeles.");
    }

    $("#liveBTN").click(function () {
        $(".stream-modal").toggle("fast")
    })

    $("#closeLive").click(function () {
        $(".stream-modal").toggle("fast")
    })


</script>


<script>

    const playbackUrl = "@urlStream";
    const videoPlayer = document.getElementById("video-player");
    const quizEl = document.getElementById("quiz");
    const waitMessage = document.getElementById("waiting");
    const questionEl = document.getElementById("question");
    const answersEl = document.getElementById("answers");
    const cardInnerEl = document.getElementById("card-inner");

    (function (IVSPlayer) {
        const PlayerState = IVSPlayer.PlayerState;
        const PlayerEventType = IVSPlayer.PlayerEventType;

        // Initialize player
        const player = IVSPlayer.create();
        player.attachHTMLVideoElement(videoPlayer);

        // Attach event listeners
        player.addEventListener(PlayerState.PLAYING, function () {
            console.log("Player State - PLAYING");
        });
        player.addEventListener(PlayerState.ENDED, function () {
            console.log("Player State - ENDED");
        });
        player.addEventListener(PlayerState.READY, function () {
            console.log("Player State - READY");
        });
        player.addEventListener(PlayerEventType.ERROR, function (err) {
            console.warn("Player Event - ERROR:", err);
        });

        player.addEventListener(PlayerEventType.TEXT_METADATA_CUE, function (cue) {
            console.log("Timed metadata: ", cue.text);
            const metadataText = cue.text;
            const position = player.getPosition().toFixed(2);
            console.log(
                `PlayerEvent - METADATA: "${metadataText}". Observed ${position}s after playback started.`
            );
            triggerQuiz(metadataText);
        });

        // Setup stream and play
        player.setAutoplay(true);
        player.load(playbackUrl);

        // Setvolume
        player.setVolume(0.1);

        // Remove card
        function removeCard() {
            quizEl.classList.toggle("drop");
        }

        // Trigger quiz
        function triggerQuiz(metadataText) {
            let obj = JSON.parse(metadataText);

            quizEl.style.display = "";
            quizEl.classList.remove("drop");
            waitMessage.style.display = "none";
            cardInnerEl.style.display = "none";
            cardInnerEl.style.pointerEvents = "auto";

            while (answersEl.firstChild) answersEl.removeChild(answersEl.firstChild);
            questionEl.textContent = obj.question;

            let createAnswers = function (obj, i) {
                let q = document.createElement("a");
                let qText = document.createTextNode(obj.answers[i]);
                answersEl.appendChild(q);
                q.classList.add("answer");
                q.appendChild(qText);

                q.addEventListener("click", (event) => {
                    cardInnerEl.style.pointerEvents = "none";
                    if (q.textContent === obj.answers[obj.correctIndex]) {
                        q.classList.toggle("correct");
                    } else {
                        q.classList.toggle("wrong");
                    }
                    setTimeout(function () {
                        removeCard();
                        waitMessage.style.display = "";
                    }, 1050);
                    return false;
                });
            };

            for (var i = 0; i < obj.answers.length; i++) {
                createAnswers(obj, i);
            }
            cardInnerEl.style.display = "";
        }

    })(window.IVSPlayer);

</script>


<style>
    @@media (prefers-reduced-motion: reduce) {
        * {
            animation-duration: 0.01ms !important;
            animation-iteration-count: 1 !important;
            transition-duration: 0.01ms !important;
            scroll-behavior: auto !important;
        }
    }

    /* Variables */
    :root {
        --radius: 12px;
        --text-color-light: #000;
        --text-alt-color-light: #777;
        --text-color-dark: #fff;
        --text-alt-color-dark: #777;
        --bg-color-light: #e9e9e9;
        --bg-color-dark: #28292d;
        --bg-alt-color-light: #e9e9e9;
        --bg-alt-color-dark: #28292d;
    }




    .player-wrapper {
        width: 100%;
        position: relative;
        overflow: hidden;
        transform: translate3d(0, 0, 0);
        backface-visibility: hidden;
        border-radius: var(--radius);
        box-shadow: 0 6px 30px rgba(0, 0, 0, 0.3);
        z-index: 1;
    }

    .aspect-spacer {
        padding-bottom: 56.25%;
    }

    .el-player {
        width: 100%;
        height: 100%;
        position: absolute;
        top: 0;
        background: #000;
        border-radius: var(--radius);
    }

    video {
        width: 100%;
        border-radius: var(--radius);
        background: #000;
    }

    .quiz-wrap {
        min-height: 460px;
        position: relative;
        transition: all 0.25s ease-in;
    }

    .card {
        margin: 0 20px;
        padding: 20px;
        position: absolute;
        left: 0;
        right: 0;
        background: #fff;
        border-radius: 20px;
        box-shadow: 0px 10px 20px rgba(0, 0, 0, 0.1);
        transition: all 1s cubic-bezier(1, -0.56, 0, 1);
        transform: translate3d(0, 0, 0) scale(1);
        backface-visibility: hidden;
        z-index: 1;
    }

        .card.drop {
            opacity: 0;
            transform: translate3d(0, 200px, -20px) scale(0.92);
        }

    h2 {
        font-size: 25px;
        text-align: center;
        padding-bottom: 20px;
    }

    .answer {
        height: 50px;
        line-height: 50px;
        font-size: 20px;
        display: flex;
        text-decoration: none;
        border: 1px solid #d5dbdb;
        border-radius: 50px;
        padding: 0 24px;
        margin: 10px 0;
        background: #fafafa;
        color: #545b64;
        transition: all 0.05s ease-in-out;
    }

        .answer:hover {
            background: #ebebebe0;
        }

        .answer:active {
            background: #ff9900;
            border: 1px solid #eb5f07;
            color: #fff;
        }

        .answer.correct {
            background: #25a702;
            border: 1px solid #1d8102;
            color: #fff;
            animation: blink 0.45s infinite;
        }

        .answer.wrong {
            background: #d13212;
            border: 1px solid #b7290d;
            color: #fff;
            animation: blink 0.45s infinite;
        }

    #waiting {
        top: 100px;
        left: 0;
        right: 0;
        position: absolute;
        display: flex;
        align-items: center;
    }

    .waiting-text {
        width: 100%;
        display: block;
        text-align: center;
        font-size: 18px;
        color: #d5dbdb;
    }

    .float {
        transform: translatey(0px);
        animation: float 6s ease-in-out infinite;
    }

    /* Utility - Position */
    .pos-absolute {
        position: absolute !important;
    }

    .pos-fixed {
        position: fixed !important;
    }

    .pos-relative {
        position: relative !important;
    }

    .top-0 {
        top: 0 !important;
    }

    .bottom-0 {
        bottom: 0 !important;
    }

    /* Utility - Width/Height */
    .full-width {
        width: 100%;
    }

    .full-height {
        height: 100%;
    }

    /* Utility – Show/Hide */
    .show {
        transition: opacity 180ms;
    }

    .hide {
        opacity: 0;
    }

    /* Animations */
    @@keyframes blink {
        50% {
            opacity: 0.8;
        }
    }

    @@keyframes float {
        0% {
            transform: translatey(0px);
        }

        50% {
            transform: translatey(-20px);
        }

        100% {
            transform: translatey(0px);
        }
    }

    /* Mediaqueries */
    @@media (max-width: 767px) {
        h2 {
            font-size: 20px;
        }

        .card {
            top: -20px;
        }
    }

    @@media (min-width: 767px) {
        .card {
            top: -25%;
        }
    }
</style>
